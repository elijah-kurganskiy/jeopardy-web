input AnswerInput {
  userId: Float!
  answer: String!
  gameId: Float!
}

type AuthTokens {
  accessToken: String!
  refreshToken: String!
}

input CaptureQuestionInput {
  userId: Float!
  gameId: Float!
}

input CreateNewGameInput {
  roomId: Float!
  quizId: Float!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Game {
  id: ID!
  creator: User!
  state: GameState!
  createdAt: DateTime!
  quiz: Quiz!
  players: [Player!]!
}

type GameState {
  id: ID!
  stateName: String!
  currentRoundId: Float!
  currentPlayerId: Float
  selectedQuestionId: Float
  answeringPlayerId: Float
  answeringPlayer: User
  answeredPlayerIds: [Int!]!
  cardSelectionAt: DateTime
  questionCaptureAt: DateTime
  openedQuestionsIds: [Int!]!
}

input LoginInput {
  username: String!
  password: String!
}

type LogoutResult {
  success: Boolean!
}

type Mutation {
  createGame(data: CreateNewGameInput!): Game!
  selectFirstPlayer(data: SelectFirstPlayerInput!): Game!
  selectQuestion(data: SelectQuestionInput!): Game!
  captureQuestion(data: CaptureQuestionInput!): Game!
  answer(data: AnswerInput!): Game!
  login(data: LoginInput!): AuthTokens!
  signUp(data: SignUpInput!): AuthTokens!
  logout: LogoutResult!
  createRoom(name: String!): Room!
  joinToRoom(roomId: Int!): Room!
  leaveRoom(roomId: Int!): Room!
}

type Player {
  id: ID!
  score: Float!
  game: Game!
  user: User!
}

type Query {
  users: [User!]!
  user(id: Float!): User!
  me: User!
  games: [Game!]!
  game(id: Float!): Game!
  quizzes: [Quiz!]!
  quiz(id: Float!): Quiz!
  round(id: Float!): Theme!
  question(id: Float!): Quiz!
  room(id: ID!): Room!
  rooms: [Room!]!
}

type QuestionEntity {
  id: ID!
  type: String
  title: String
  path: String
  answer: String!
  price: Float!
  theme: Theme!
}

type Quiz {
  id: ID!
  name: String!
  rounds: [Round!]!
}

type Room {
  id: ID!
  name: String!
  users: [User!]!
}

type Round {
  id: ID!
  name: String!
  themes: [Theme!]!
}

input SelectFirstPlayerInput {
  userId: Float!
  gameId: Float!
}

input SelectQuestionInput {
  userId: Float!
  questionId: Float!
  gameId: Float!
}

input SignUpInput {
  username: String!
  password: String!
}

type Theme {
  id: ID!
  name: String!
  questions: [QuestionEntity!]!
  round: Round!
}

type User {
  id: ID!
  username: String!
  firstName: String!
  lastName: String!
}

